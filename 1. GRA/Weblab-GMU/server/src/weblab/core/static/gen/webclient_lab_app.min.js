angular.module("lab",[]);angular.module("lab",['pascalprecht.translate']).config(['$translateProvider',translateConfig]).controller("LabController",LabController);function translateConfig($translateProvider){$translateProvider.useSanitizeValueStrategy('escaped');$translateProvider.useUrlLoader(LOCALES_URL);$translateProvider.preferredLanguage(PREFERRED_LANGUAGE);}
function LabController($scope,$injector,$http){var controller=this;var $log=$injector.get('$log');var $rootScope=$injector.get('$rootScope');$scope.experiment={};$scope.experiment.data=EXPERIMENT_DATA;$scope.experiment.reserving=false;$scope.experiment.loading=true;$scope.experiment.loadingFailed=false;$scope.experiment.reloading=false;$scope.experiment.active=false;$scope.experiment.federated=FEDERATED_MODE;$scope.latest_uses={uses:[]};$scope.experiment_iframe={experiment:EXPERIMENT_DATA,language:PREFERRED_LANGUAGE,iframe_url:"",shown:true};if(CLIENT_TYPE=="js"){if(EXPERIMENT_DATA['config']['html.file'].indexOf('http://')==0||EXPERIMENT_DATA['config']['html.file'].indexOf('/')==0){$scope.experiment_iframe.iframe_url=EXPERIMENT_DATA['config']['html.file'];}else{if(EXPERIMENT_DATA['config']['builtin']===true){$scope.experiment_iframe.iframe_url=WL_LAB_URL+EXPERIMENT_DATA['config']['html.file'];}else{$scope.experiment_iframe.iframe_url=WL_PUB_URL+EXPERIMENT_DATA['config']['html.file'];}}}else{$scope.experiment_iframe.iframe_url=GWT_BASE_URL;}
$scope.experiment_info={experiment:EXPERIMENT_DATA};$scope.experiment_info.experiment.isExperimentReserving=isExperimentReserving;$scope.experiment_info.experiment.isExperimentLoading=isExperimentLoading;$scope.experiment_info.experiment.isExperimentReloading=isExperimentReloading;$scope.experiment_info.experiment.isExperimentFederated=isExperimentFederated;$scope.experiment_info.experiment.isReserveButtonShown=isReserveButtonShown;$scope.experiment_info.experiment.reserve=reserve;$scope.reserveMessage={message:'',translationData:{},type:'info',backUrl:''};var mExperimentLoaded=$.Deferred();$scope.$on("experimentLoaded",markAsLoaded);$scope.$on("experimentLoadingFailed",markAsLoadingFailed);$scope.reserve=reserve;$scope.reserveInFrame=reserveInFrame;$scope.reserveInWindow=reserveInWindow;$scope.isExperimentActive=isExperimentActive;$scope.isExperimentReserving=isExperimentReserving;$scope.isExperimentLoading=isExperimentLoading;$scope.isExperimentReloading=isExperimentReloading;$scope.isExperimentFederated=isExperimentFederated;$scope.finishExperiment=finishExperiment;$scope.loadLatestUses=loadLatestUses;$scope.loadLabStats=loadLabStats;controller.handleReserveProgress=handleReserveProgress;controller.handleReserveFail=handleReserveFail;if(FEDERATED_MODE){onExperimentLoaded(function(){startReserved('frame',FEDERATED_RESERVATION_ID);});}else{loadLatestUses();loadLabStats();}
function zfill(n){if(n<10)
return"0"+n;return n;}
function finishExperiment(){window.currentExperiment.cleanExperiment();}
function isExperimentActive(){return $scope.experiment.active;}
function isExperimentFederated(){return $scope.experiment.federated;}
function isReserveButtonShown(){return EXPERIMENT_DATA['config']['experiment.reserve.button.shown']!==false;};function isExperimentReserving(){return $scope.experiment.reserving;}
function isExperimentLoading(){return $scope.experiment.loading;}
function isExperimentReloading(){return $scope.experiment.reloading;}
function markAsLoaded(){$scope.experiment.loading=false;$scope.experiment.loadingFailed=false;$scope.experiment.reloading=false;mExperimentLoaded.resolve();$scope.$apply();$scope.$broadcast("experimentLoadedAndDisplayed");}
function markAsLoadingFailed(){$scope.experiment.loadingFailed=true;$scope.$apply();}
function onExperimentLoaded(callback){mExperimentLoaded.done(callback);return mExperimentLoaded.promise();}
function loadLatestUses(){$http.get(LATEST_USES_URL).then(function(response){if(response.status==200){$scope.latest_uses.uses=response.data.uses;angular.forEach($scope.latest_uses.uses,function(value,key){var d=new Date(value.start_date.replace(/ /,'T'));var formatted=d.getFullYear()+"-"+zfill(d.getMonth()+1)+"-"+zfill(d.getDate())+" "+zfill(d.getHours())+":"+zfill(d.getMinutes())+":"+zfill(d.getSeconds());value.start_date_formatted=formatted;});}});}
function loadLabStats(){$http.get(LAB_STATS_URL).then(function(response){if(response.status==200){$scope.lab_stats=response.data.stats;if(response.data.stats.status=='online'){$scope.lab_stats.status='ONLINE';$scope.lab_stats.status_color='green';}}});}
function handleReserveProgress(status,position,result,broken){window.currentExperiment._callOnQueue();if(!broken){if(position!=undefined){if(position==0){$scope.reserveMessage.message="WAITING_IN_QUEUE_NEXT";$scope.reserveMessage.type='info';}
else{console.log(position);$scope.reserveMessage.translationData={position:position};$scope.reserveMessage.message="WAITING_IN_QUEUE_N";$scope.reserveMessage.type='info';}
$scope.$apply();}}else if(broken){if(position!=undefined){if(position==0){$scope.reserveMessage.message="WAITING_FOR_INSTANCES_NEXT";$scope.reserveMessage.type='danger';}
else{$scope.reserveMessage.message="WAITING_FOR_INSTANCES_N";$scope.reserveMessage.type='danger';}
$scope.$apply();}else{$scope.reserveMessage.message="WAITING_FOR_INSTANCES_N";$scope.reserveMessage.type='danger';}}}
function handleReserveFail(error){if(error.code=="JSON:Client.SessionNotFound"){$scope.reserveMessage.message='NOT_LOGGED_IN';$scope.reserveMessage.type='danger';setTimeout(function(){window.location=WL_LOGIN_URL;},1500);}
else{$scope.reserveMessage.message='FAILED_TO_RESERVE';$scope.reserveMessage.translationData={reason:error.message};$scope.reserveMessage.type='danger';}
$scope.$apply();}
function startReserved(where,reservationID){$scope.experiment_iframe.shown=true;var reservationStatusPromiseGenerator=function(weblab){return weblab.getReservationStatus(reservationID);}.bind(this);return _reserve(where,reservationStatusPromiseGenerator);}
function reserve(where){var reservationStatusPromiseGenerator=function(weblab){var sessionID=WL_SESSION_ID;sessionID=sessionID.split(".",1)[0];var name=EXPERIMENT_DATA['name'];var category=EXPERIMENT_DATA['category'];return weblab.reserveExperiment(sessionID,name,category);}.bind(this);return _reserve(where,reservationStatusPromiseGenerator);}
function _reserve(where,reservationStatusPromiseGenerator){$scope.experiment.reserving=true;$scope.reserveMessage.message="RESERVING";$scope.reserveMessage.type='info';if(where=='frame'){return reserveInFrame(reservationStatusPromiseGenerator);}else if(where=='window'){return reserveInWindow(reservationStatusPromiseGenerator);}else{console.log("where must be frame or window: "+where);}}
function reserveRedirect(reservationStatusPromiseGenerator){window.currentExperiment=weblab;weblab.setOnGetInitialDataCallback(function(){return{back:location.href};});weblab._setTargetURL(WL_JSON_URL);reservationStatusPromiseGenerator(weblab).progress(handleReserveProgress).fail(handleReserveFail).done(function(id,time,initConfig,result){console.log("RESERVATION DONE");console.log(result);$scope.experiment.reserving=false;$scope.reserveMessage.message="RESERVATION_DONE";$scope.reserveMessage.type='info';console.log("ON REDIR");var parsedConfig=JSON.parse(initConfig);var url=parsedConfig["url"];url=url.replace("TIME_REMAINING",Math.floor(time));if(url==undefined){console.error("EXPERIMENT DOES NOT SEEM TO BE OF REDIRECT TYPE: NO URL PROVIDED.");weblab.finishExperiment();return;}
console.log("Redirecting to: "+url);window.location=url;});}
function reserveInFrame(reservationStatusPromiseGenerator){var frame=$("#exp-frame")[0];var Wexp=frame.contentWindow.WeblabExp;if(Wexp==undefined||Wexp.lastInstance==undefined){var error={message:"The experiment does not seem to support iframe mode",code:"JSON:ClientSideError:IframeModeNotSupported"};$scope.experiment.active=false;$scope.experiment.reserving=false;handleReserveFail(error);return;}
var wexp=Wexp.lastInstance;window.currentExperiment=wexp;wexp._setTargetURL(WL_JSON_URL);reservationStatusPromiseGenerator(wexp).progress(handleReserveProgress).fail(handleReserveFail).done(function(uid,time,initial_config,result){console.log("Experiment now active");$scope.experiment.active=true;$scope.experiment.reserving=false;console.log("SETTING EXPERIMENT TO ACTIVE. SCOPE: ");console.log($scope.$id);$scope.reserveMessage.message="RESERVATION_DONE";$scope.reserveMessage.type='info';var url=result["url"];var wexp=window.currentExperiment;wexp._reservationReady(result["reservation_id"]["id"],result["time"],result["initial_configuration"]);wexp.onExperimentDeactive().done(function(f){$scope.experiment.active=false;if(FEDERATED_MODE){$scope.experiment_iframe.shown=false;$scope.reserveMessage.message="EXPERIMENT_FINISHED_GO_BACK";if(BACK_URL)
$scope.reserveMessage.backUrl=BACK_URL;}else{$scope.loadLatestUses();$scope.loadLabStats();$scope.reserveMessage.message="";$scope.experiment.reloading=true;}
$rootScope.$broadcast("experimentFinished");try{$scope.$apply();}catch(E){}});$scope.$apply();});}
function reserveInWindow(reservationStatusPromiseGenerator){var wexp=Wexp.lastInstance;window.currentExperiment=wexp;wexp._setTargetURL(WL_JSON_URL);reservationStatusPromiseGenerator(wexp).progress(handleReserveProgress).fail(handleReserveFail).done(function(id,time,initConfig,result){console.log("RESERVATION DONE");console.log(result);$scope.experiment.reserving=false;$scope.reserveMessage.message="RESERVATION_DONE";$scope.reserveMessage.type='info';if(EXPERIMENT_DATA["type"]=="js"){var params={"r":id,"c":initConfig,"t":time,"u":WL_JSON_URL,"free":"true"};var redir=WL_LAB_URL+EXPERIMENT_DATA['config']['html.file'];redir+="?"+$.param(params);console.log(redir);window.location=redir;}else{console.log("ON REDIR");var parsedConfig=JSON.parse(initConfig);var url=parsedConfig["url"];url=url.replace("TIME_REMAINING",Math.floor(time));if(url==undefined){console.error("EXPERIMENT DOES NOT SEEM TO BE OF REDIRECT TYPE: NO URL PROVIDED.");wexp.finishExperiment();return;}
console.log("Redirecting to: "+url);window.location=url;}});}}
angular.module("lab").directive("wlExpInfo",wlExpInfo);function wlExpInfo(){return{restrict:"E",scope:{experiment:"=",latestuses:"=",stats:"=",reserve:"&",reserveMessage:"="},templateUrl:EXPINFO_TEMPLATE_URL,link:wlExpInfoLink};function wlExpInfoLink(scope,elem,attrs){scope.Math=Math;}}
angular.module("lab").factory("Resizer",ResizerFactory);function ResizerFactory(){return{loadFrameResizer:loadFrameResizer,injectScriptIntoFrame:injectScriptIntoFrame,forceFrameResizer:forceFrameResizer,resize:resize};var mHasBeenCalled=false;var IFRAMERESIZER_LOG=IFRAMERESIZER_LOG||false;function loadFrameResizer(iframeElement){iframeElement.on("load",function(ev){var timesTried=0;var initResizeInterval=setInterval(function(){if(iframeElement!==undefined){if(!mHasBeenCalled){mHasBeenCalled=true;iframeElement.iFrameResize({log:IFRAMERESIZER_LOG,enablePublicMethods:true,checkOrigin:false},"#exp-frame");}
clearInterval(initResizeInterval);}else{timesTried++;if(timesTried>100){clearInterval(initResizeInterval);console.error("[RESIZE]: We failed to resize the experiment's iframe. Maybe the experiment's iframe resizer script could not be injected properly.");}}},50);});}
function forceFrameResizer(iframeElement){if(!mHasBeenCalled){mHasBeenCalled=true;iframeElement.iFrameResize({log:IFRAMERESIZER_LOG,enablePublicMethods:true,checkOrigin:false},"#exp-frame");}}
function injectScriptIntoFrame(iframe,url){myIframe=iframe[0];var script=myIframe.contentWindow.document.createElement("script");script.async=false;script.defer=false;script.type="text/javascript";script.src=url;myIframe.contentWindow.document.head.appendChild(script);}
function resize(iframeElement){if(iframeElement[0].iFrameResizer!==undefined&&iframeElement[0].iFrameResizer.resize!==undefined){iframeElement[0].iFrameResizer.resize();}}}
angular.module("lab").controller("ExperimentIframeController",ExperimentIframeController);function ExperimentIframeController($scope,$injector){var controller=this;}
angular.module("lab").directive("wlExperimentIframe",wlExperimentIframe);function wlExperimentIframe($injector){return{restrict:"E",scope:{experiment:"=",iframeurl:"=",language:"="},templateUrl:EXPERIMENT_IFRAME_TEMPLATE_URL,controller:"ExperimentIframeController",controllerAs:"experimentIframeController",link:wlExperimentIframeLink};function wlExperimentIframeLink(scope,elem,attrs,ctrl){var $log=$injector.get('$log');var resizer=$injector.get('Resizer');var iframe=elem.find("iframe");var loadingTimeout;var loadedCalled=false;iframe.load(handleLoadEvent);resizer.loadFrameResizer(iframe);window.addEventListener('message',_processMessages,false);scope.$on("experimentFinished",onExperimentFinished);scope.$on("experimentLoadedAndDisplayed",onExperimentLoadedAndDisplayed);function onExperimentFinished(){iframe.attr('src',function(i,val){return val;});}
function onExperimentLoadedAndDisplayed(){resizer.resize(iframe);}
function _timeoutFunction(){console.log("Timeout happened");if(!loadedCalled){scope.$emit("experimentLoadingFailed");}}
function handleLoadEvent(){$log.debug("Injecting scripts");loadingTimeout=setTimeout(_timeoutFunction,40*1000);resizer.injectScriptIntoFrame(iframe,IFRAME_RESIZER_URL);}
function _processMessages(e){if(new String(e.data).indexOf("weblabdeusto::")==0){if(new String(e.data)=="weblabdeusto::experimentLoaded"){clearTimeout(loadingTimeout);loadedCalled=true;resizer.forceFrameResizer(iframe);setTimeout(function(){scope.$emit("experimentLoaded");},2000);}else if(new String(e.data).indexOf("weblabdeusto::experimentLoading::")==0){var message=new String(e.data);var time=message.substring("weblabdeusto::experimentLoading::".length,message.length);var seconds=parseInt(time);clearTimeout(loadingTimeout);loadingTimeout=setTimeout(_timeoutFunction,seconds*1000);}else if(new String(e.data).indexOf("weblabdeusto::reserve")==0){scope.experiment.reserve('frame');}}}}}
angular.module("lab").directive("wlReserveStatus",wlReserveStatus);function wlReserveStatus(){return{restrict:"E",scope:{reserveMessage:"=",},templateUrl:RESERVE_STATUS_TEMPLATE_URL,link:wlReserveStatusLink};function wlReserveStatusLink(scope,elem,attrs){scope.getClassesForType=getClassesForType;function getClassesForType(type){if(type=='danger')
return"alert alert-danger";else
return"alert alert-info";}}}
angular.module("lab").controller("ReserveController",ReserveController);function ReserveController($scope,$injector){var controller=this;}
angular.module("lab").directive("wlReserve",wlReserve);function wlReserve(){return{restrict:"E",controller:"ReserveController",controllerAs:"reserveController",link:wlReserveLink,templateUrl:LAB_RESERVE_TEMPLATE_URL,scope:{experiment:"="}};function wlReserveLink(scope,elem,attrs){scope.Math=Math;}}